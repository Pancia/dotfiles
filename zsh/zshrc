function _not_same_inode {
    [ "$(stat -f '%i' $1)" != "$(stat -f '%i' $2)" ]
}

function _ENSURE_RCS {
    for rc in $(find $HOME/dotfiles/rcs -type f -not -name '.*'); do
        local rc_dest="$(head -n 1 $rc | sed -E 's/.*<\[(.*)\]>.*/\1/' )"
        if [[ ! -f "$HOME/$rc_dest" ]] || $(_not_same_inode "$HOME/$rc_dest" "$rc") ; then
            mkdir -p "$(dirname $HOME/$rc_dest)"
            ln -f "$rc" "$HOME/$rc_dest"
        fi
    done
}

function _ENSURE_SERVICES {
    local dest=$HOME/Library/LaunchAgents/
    for service_path in $(find $HOME/dotfiles/services -type f -name '*.plist'); do
        local plist=$(basename $service_path)
        local service_name=$(basename $plist .plist)
        if [[ ! -f "$dest/$plist" ]] || $(_not_same_inode "$dest/$plist" "$service_path") ; then
            echo "[zshrc/SERVICE]: (re)loading $service_path"
            ln -f "$service_path" "$dest/$(basename $service_path)"
            launchctl load ~/Library/LaunchAgents/$plist
            launchctl start "$(basename $plist .plist)"
        fi
    done
}

function ZSHRC {
    (_ENSURE_RCS &)
    (_ENSURE_SERVICES &)

    source ~/dotfiles/zsh/init.zsh
    [ -e ~/dotfiles/zsh/extra.zsh ] && source ~/dotfiles/zsh/extra.zsh

    if [[ $1 == prompt ]]; then
        shift
        ICMD="$@"
        set --
        function zle-line-init {
            BUFFER="$ICMD"
            zle -D zle-line-init
            zle end-of-line
        }
        zle -N zle-line-init
        ACCEPT_LINE="$(zle -l | grep '^accept-line ' | ag -o '\((.*)\)' | sed 's/[\(\)]//g')"
        function accept-line {
            LINE="$BUFFER"
            BUFFER=" $LINE;exit"
            zle -D accept-line
            print -s "$LINE"
            $ACCEPT_LINE
        }
        zle -N accept-line
    fi

    if [[ $1 == eval ]]; then
        shift
        ICMD="$@"
        set --
        function zle-line-init {
            BUFFER="$ICMD"
            zle accept-line
            zle -D zle-line-init
        }
        zle -N zle-line-init
    fi

    chpwd # Best to check, new shell (new term window or `zsh`) does not trigger chpwd

    export NVM_DIR="$HOME/.config/nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
}

local ZSH_PROF_LOG="/tmp/zsh-profiling.$$.log"
local ZPROF_LOG="/tmp/zprof.$$.log"
function PROF_GO {
    trap "
    # set the trace prompt to include seconds, nanoseconds, script name and line number
    zmodload zsh/datetime
    setopt promptsubst prompt_subst
    PS4='%D{%M%S%.} %N:%i> '
    # save file stderr to file descriptor 3 and redirect stderr (including trace output)
    exec 3>&2 2>$ZSH_PROF_LOG
    setopt xtrace
    " EXIT
    zmodload zsh/zprof
}

function PROF_NO {
    trap '
    unsetopt xtrace
    # restore stderr to the value saved in FD 3
    exec 2>&3 3>&-
    ' EXIT
    zprof > $ZPROF_LOG
}

function dbg {
    ~/dotfiles/misc/parse-zsh-profiling.py ${ZSH_PROF_LOG/$$/$1} | command less
    command less ${ZPROF_LOG/$$/$1}
}

[[ 1 == $PROF ]] &&
    PROF_GO
ZSHRC "$@"; local X=$?
[[ 1 == $PROF ]] &&
    PROF_NO &&
    export PROF=0 &&
    export PROF_PROC=$$ &&
    echo $PROF_PROC
[ $X ] || exit $X
